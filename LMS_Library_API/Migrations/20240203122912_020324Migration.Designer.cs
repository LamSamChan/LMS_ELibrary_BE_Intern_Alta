// <auto-generated />
using System;
using LMS_Library_API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LMS_Library_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240203122912_020324Migration")]
    partial class _020324Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("censorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateSubmited")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("numericalOrder")
                        .HasColumnType("int");

                    b.Property<int>("partId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<Guid>("teacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("censorId");

                    b.HasIndex("partId");

                    b.HasIndex("teacherCreatedId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("censorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("dateSubmited")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isHidden")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("numericalOrder")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("subjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("teacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("censorId");

                    b.HasIndex("subjectId");

                    b.HasIndex("teacherCreatedId");

                    b.ToTable("Part", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.ExamRecentViews", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExamId")
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamRecentViews", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.Help", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Help", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.PrivateFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<string>("Modifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateFile", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.QnALikes", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswersLikedID")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("QuestionsLikedID")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.HasKey("UserId");

                    b.ToTable("QnALikes", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Exam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("CensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Format")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TeacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CensorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherCreatedId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_Essay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LimitWord")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("SubmitType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QB_Answer_Essay", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_MC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QB_Answer_MC", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Question_Exam", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Question_Exam", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QuestionBanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<bool>("Format")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TeacherCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherCreatedId");

                    b.ToTable("QuestionBanks", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeCounter")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FeatureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NotificationFeatures", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationSetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeaturesId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveNotification")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "FeaturesId");

                    b.HasIndex("FeaturesId");

                    b.ToTable("NotificationSetting", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role_Permissions", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<bool>("CanAccess")
                        .HasColumnType("bit");

                    b.HasKey("RoleId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("Role_Permissions", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.SystemInfomation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LMSWebsite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LibrarySystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("Principals")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SchoolLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SchoolWebsite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Principals")
                        .IsUnique();

                    b.ToTable("SystemInfomation", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Avartar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Lesson", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("CensorLesson")
                        .HasForeignKey("censorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.AboutSubject.Part", "Part")
                        .WithMany("Lessons")
                        .HasForeignKey("partId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreatedLesson")
                        .HasForeignKey("teacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Part");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Part", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("CensorPart")
                        .HasForeignKey("censorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("Parts")
                        .HasForeignKey("subjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreatedPart")
                        .HasForeignKey("teacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Subject");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.ExamRecentViews", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.Exam", "Exam")
                        .WithMany("ExamRecentViews")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("ExamRecentViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.Help", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("Helps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.PrivateFile", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("PrivateFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutUser.QnALikes", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithOne("QnALikes")
                        .HasForeignKey("LMS_Library_API.Models.AboutUser.QnALikes", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Exam", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "Censor")
                        .WithMany("Censor")
                        .HasForeignKey("CensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "TeacherCreated")
                        .WithMany("TeacherCreated")
                        .HasForeignKey("TeacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Censor");

                    b.Navigation("Subject");

                    b.Navigation("TeacherCreated");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_Essay", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.QuestionBanks", "QuestionBanks")
                        .WithOne("QB_Answer_Essay")
                        .HasForeignKey("LMS_Library_API.Models.Exams.QB_Answer_Essay", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QB_Answer_MC", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.QuestionBanks", "QuestionBanks")
                        .WithMany("QB_Answers_MC")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Question_Exam", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Exams.Exam", "Exam")
                        .WithMany("Question_Exam")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.Exams.QuestionBanks", "QuestionBanks")
                        .WithMany("Question_Exam")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QuestionBanks", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Subject", "Subject")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("TeacherCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.Notification", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationSetting", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Notification.NotificationFeatures", "NotificationFeatures")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithMany("NotificationSetting")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationFeatures");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role_Permissions", b =>
                {
                    b.HasOne("LMS_Library_API.Models.RoleAccess.Permissions", "Permissions")
                        .WithMany("Role_Permissions")
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.RoleAccess.Role", "Role")
                        .WithMany("Role_Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Subject", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithOne("Subject")
                        .HasForeignKey("LMS_Library_API.Models.Subject", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.SystemInfomation", b =>
                {
                    b.HasOne("LMS_Library_API.Models.User", "User")
                        .WithOne("SystemInfomation")
                        .HasForeignKey("LMS_Library_API.Models.SystemInfomation", "Principals")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS_Library_API.Models.User", b =>
                {
                    b.HasOne("LMS_Library_API.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS_Library_API.Models.RoleAccess.Role", "Role")
                        .WithOne("User")
                        .HasForeignKey("LMS_Library_API.Models.User", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LMS_Library_API.Models.AboutSubject.Part", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Department", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.Exam", b =>
                {
                    b.Navigation("ExamRecentViews");

                    b.Navigation("Question_Exam");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Exams.QuestionBanks", b =>
                {
                    b.Navigation("QB_Answer_Essay")
                        .IsRequired();

                    b.Navigation("QB_Answers_MC");

                    b.Navigation("Question_Exam");
                });

            modelBuilder.Entity("LMS_Library_API.Models.Notification.NotificationFeatures", b =>
                {
                    b.Navigation("NotificationSetting");
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Permissions", b =>
                {
                    b.Navigation("Role_Permissions");
                });

            modelBuilder.Entity("LMS_Library_API.Models.RoleAccess.Role", b =>
                {
                    b.Navigation("Role_Permissions");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("LMS_Library_API.Models.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Parts");

                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("LMS_Library_API.Models.User", b =>
                {
                    b.Navigation("Censor");

                    b.Navigation("CensorLesson");

                    b.Navigation("CensorPart");

                    b.Navigation("ExamRecentViews");

                    b.Navigation("Helps");

                    b.Navigation("NotificationSetting");

                    b.Navigation("Notifications");

                    b.Navigation("PrivateFiles");

                    b.Navigation("QnALikes")
                        .IsRequired();

                    b.Navigation("QuestionBanks");

                    b.Navigation("Subject")
                        .IsRequired();

                    b.Navigation("SystemInfomation")
                        .IsRequired();

                    b.Navigation("TeacherCreated");

                    b.Navigation("TeacherCreatedLesson");

                    b.Navigation("TeacherCreatedPart");
                });
#pragma warning restore 612, 618
        }
    }
}
